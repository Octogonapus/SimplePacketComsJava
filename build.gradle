
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'application'


sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
//repairHeaders.licenseHeaderText = new File(projectDir,'./license-template.txt')


task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '2.1'
}


task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


repositories {
    mavenCentral()
    jcenter()
}

// javadoc is way too strict for my taste.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("encoding", "UTF-8")
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
sourceSets {
  test {
    java.srcDir 'test/java/src'
  }

}


mainClassName = ""
dependencies {
	testCompile 'junit:junit:4.10'
	compile 'org.hid4java:hid4java:0.5.0'
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {


	doFirst { 
	    // dependencies except VRL
	    from (configurations.runtime.asFileTree.
	        filter({file->return !file.name.startsWith("vrl-0")}).
	        files.collect { zipTree(it) } ){
	    	exclude 'META-INF/MANIFEST.MF'
			exclude 'META-INF/*.SF'
			exclude 'META-INF/*.DSA'
			exclude 'META-INF/*.RSA'
	    }
	}

}

group = "com.neuronrobotics"
archivesBaseName = "SimplePacketComsJava"
version = "0.4.0"


artifacts {
	archives javadocJar, sourcesJar, jar
}

signing {
	sign configurations.archives
}
uploadArchives {
	repositories {
	  mavenDeployer {
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
  
		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
		  authentication(userName: ossrhUsername, password: ossrhPassword)
		}
  
		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
		  authentication(userName: ossrhUsername, password: ossrhPassword)
		}
  
		pom.project {
		  name 'JCSG JavaCad'
		  packaging 'jar'
		  // optionally artifactId can be defined here
		  description 'A simple packet communication library'
		  url 'https://github.com/madhephaestus/SimplePacketComsJava'
  
		  scm {
			connection 			'scm:git:https://github.com/madhephaestus/SimplePacketComsJava.git'
			developerConnection 'scm:git:git@github.com:madhephaestus/SimplePacketComsJava.git'
			url 'https://github.com/madhephaestus/SimplePacketComsJava'
		  }
  
		  licenses {
			license {
			  name 'The Apache License, Version 2.0'
			  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			}
		  }
  
		  developers {
			developer {
			  id 'madhephaestus'
			  name 'Kevin Harrington'
			  email 'kharrington@neuronrobotics.com'
			}
		  }
		}
	  }
	}
  }
  
